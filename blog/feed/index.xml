<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"><channel><title>Tom Dalling</title><link>http://www.tomdalling.com/?utm_source=rss&amp;utm_medium=rss</link><atom:link href="http://www.tomdalling.com/blog/feed/" rel="self" type="application/rss+xml"></atom:link><description>Web &amp; software developer</description><language>en</language><generator>Tom Dalling's fingertips</generator><sy:updatePeriod>daily</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><item><title>Making Fruity Bat (a Flappy Bird clone) in Ruby</title><link>http://www.tomdalling.com/blog/ruby/fruity-bat-flappy-bird-clone-in-ruby/?utm_source=rss&amp;utm_medium=rss</link><description><![CDATA[<p>Today I live-streamed the making of Fruity Bat (a Flappy Bird clone) in Ruby using the <code>gosu</code> gem. Watch the video below, and check out the code on github: <a href="https://github.com/tomdalling/fruity_bat">https://github.com/tomdalling/fruity_bat</a></p>
]]></description><pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate><category><![CDATA[Ruby]]></category><guid isPermaLink="false">com.tomdalling.blog.making-fruity-bat</guid></item><item><title>Modern OpenGL 08 – Even More Lighting: Directional Lights, Spotlights, &amp; Multiple Lights</title><link>http://www.tomdalling.com/blog/modern-opengl/08-even-more-lighting-directional-lights-spotlights-multiple-lights/?utm_source=rss&amp;utm_medium=rss</link><description><![CDATA[<p>In this article, we will be adding directional lights, spotlights, and allowing for multiple lights instead of just one. This is the final article on lighting – at least for a while.</p>
]]></description><pubDate>Sat, 01 Nov 2014 00:00:00 +0000</pubDate><category><![CDATA[Modern OpenGL Series]]></category><guid isPermaLink="false">com.tomdalling.modern-opengl-series.08</guid></item><item><title>OpenGL in 2014</title><link>http://www.tomdalling.com/blog/modern-opengl/opengl-in-2014/?utm_source=rss&amp;utm_medium=rss</link><description><![CDATA[<p>Valve is investing in OpenGL to hedge themselves against Microsoft. Some well-known developers have written about the deficiencies in the API. A few competing, proprietary APIs have popped up. In an effort to remain competitive, Khronos announces glnext: a ground-up rethinking of the OpenGL and OpenGL ES APIs. This post will look at developments in the OpenGL ecosystem over the last couple of years.</p>
]]></description><pubDate>Sun, 21 Sep 2014 00:00:00 +0000</pubDate><category><![CDATA[Modern OpenGL Series]]></category><guid isPermaLink="false">com.tomdalling.blog.opengl-in-2014</guid></item><item><title>Explaining Homogeneous Coordinates &amp; Projective Geometry</title><link>http://www.tomdalling.com/blog/modern-opengl/explaining-homogenous-coordinates-and-projective-geometry/?utm_source=rss&amp;utm_medium=rss</link><description><![CDATA[<p>In this article I'm going to explain homogeneous coordinates (a.k.a. 4D coordinates) as simply as I can. In previous articles, we've used 4D vectors for matrix multiplication, but I've never really defined what the fourth dimension actually is. Now it's time to take a closer look at projective geometry.</p><p>Also, welcome back! It has been a while since my last post. Hopefully I will find some time in the next couple of months to finish up the <a href="http://tomdalling.com/blog/category/modern-opengl/">Modern OpenGL Series</a> of articles. The code for article 08 is done, but writing the article will take some time.</p>
]]></description><pubDate>Mon, 24 Feb 2014 00:00:00 +0000</pubDate><category><![CDATA[Modern OpenGL Series]]></category><guid isPermaLink="false">1388 http://tomdalling.com/?p=1388</guid></item><item><title>Modern OpenGL 07 – More Lighting: Ambient, Specular, Attenuation, Gamma</title><link>http://www.tomdalling.com/blog/modern-opengl/07-more-lighting-ambient-specular-attenuation-gamma/?utm_source=rss&amp;utm_medium=rss</link><description><![CDATA[<p>In this article we will continue to implement lighting. We will implement the ambient and specular components of the Phong reflection model, attenuation, and gamma correction.</p>
]]></description><pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate><category><![CDATA[Modern OpenGL Series]]></category><guid isPermaLink="false">1282 http://tomdalling.com/?p=1282</guid></item><item><title>Modern OpenGL 06 – Diffuse Point Lighting</title><link>http://www.tomdalling.com/blog/modern-opengl/06-diffuse-point-lighting/?utm_source=rss&amp;utm_medium=rss</link><description><![CDATA[<p>This is the first article covering lighting. We will begin our lighting adventure by implementing per-pixel, diffuse lighting with a single point light. In later articles we will implement ambient and specular reflection, directional lights, spotlights, attenuation, and using multiple lights.</p>
]]></description><pubDate>Sat, 23 Mar 2013 00:00:00 +0000</pubDate><category><![CDATA[Modern OpenGL Series]]></category><guid isPermaLink="false">1139 http://tomdalling.com/?p=1139</guid></item><item><title>Modern OpenGL 05 – Model Assets &amp; Instances</title><link>http://www.tomdalling.com/blog/modern-opengl/05-model-assets-and-instances/?utm_source=rss&amp;utm_medium=rss</link><description><![CDATA[<p>In this article, we will be refactoring the code to be more like a 3D engine/framework. Specifically, we will be replacing some of the globals with structs that represent "assets" and "instances." At the end, we will have a single wooden crate asset, and five instances of that asset arranged to spell out "Hi" in 3D.</p>
]]></description><pubDate>Fri, 08 Feb 2013 00:00:00 +0000</pubDate><category><![CDATA[Modern OpenGL Series]]></category><guid isPermaLink="false">1104 http://tomdalling.com/?p=1104</guid></item><item><title>Modern OpenGL 04 - Cameras, Vectors &amp; Input</title><link>http://www.tomdalling.com/blog/modern-opengl/04-cameras-vectors-and-input/?utm_source=rss&amp;utm_medium=rss</link><description><![CDATA[<p>In this article, we will be consolidating the matrix and camera knowledge from the previous article into the new <code>tdogl::Camera</code> class, which will be a first-person shooter type of camera. Then, we will connect the camera to keyboard and mouse input, so we can move within the 3D scene and look around. This will involve learning a bit of vector math. We will also learn about inverting matrices, which was not mentioned in the previous article.</p>
]]></description><pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate><category><![CDATA[Modern OpenGL Series]]></category><guid isPermaLink="false">989 http://tomdalling.com/?p=989</guid></item><item><title>Using Git For Hacky Archive Deduplication</title><link>http://www.tomdalling.com/blog/random-stuff/using-git-for-hacky-archive-deduplication/?utm_source=rss&amp;utm_medium=rss</link><description><![CDATA[<p>Have you ever wished that <code>tar</code> or <code>zip</code> would deduplicate files when creating an archive? Well here's a hacky solution using <a href="http://git-scm.com/">git</a>.</p>
]]></description><pubDate>Sat, 12 Jan 2013 00:00:00 +0000</pubDate><category><![CDATA[Miscellaneous]]></category><guid isPermaLink="false">980 http://tomdalling.com/?p=980</guid></item><item><title>Modern OpenGL 03 - Matrices, Depth Buffering, Animation</title><link>http://www.tomdalling.com/blog/modern-opengl/03-matrices-depth-buffering-animation/?utm_source=rss&amp;utm_medium=rss</link><description><![CDATA[<p>In this article, we will replace our immobile 2D triangle with a spinning 3D cube. The end result will look like this: </p><p><figure class="black">  <img src="/images/posts/modern-opengl-03/rotating-crate.gif" /> </figure></p><p>Now that we're finally getting something interesting on the screen, I can include more pictures! An album of animated gifs is available here: <a href="http://imgur.com/a/x8q7R">http://imgur.com/a/x8q7R</a></p><p>In order to make this spinning cube, we will learn a bit about matrix math, and how it is used to create perspective projections, rotation, translation, and the concept of a "camera." We will also learn about depth buffering, and why it is necessary. We will also see how a typical 3D application implements changes over time, such as animation.</p>
]]></description><pubDate>Sun, 16 Dec 2012 00:00:00 +0000</pubDate><category><![CDATA[Modern OpenGL Series]]></category><guid isPermaLink="false">879 http://tomdalling.com/?p=879</guid></item></channel></rss>